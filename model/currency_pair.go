// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrencyPair the currency pair for which the participan can provide a quot
// swagger:model CurrencyPair
type CurrencyPair struct {

	// the source currency
	// Required: true
	SourceCurrency *string `json:"source_currency"`

	// the target currency
	// Required: true
	TargetCurrency *string `json:"target_currency"`
}

// Validate validates this currency pair
func (m *CurrencyPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrencyPair) validateSourceCurrency(formats strfmt.Registry) error {

	if err := validate.Required("source_currency", "body", m.SourceCurrency); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPair) validateTargetCurrency(formats strfmt.Registry) error {

	if err := validate.Required("target_currency", "body", m.TargetCurrency); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrencyPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrencyPair) UnmarshalBinary(b []byte) error {
	var res CurrencyPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
