// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrencyPriceQuote currency price quote
// swagger:model CurrencyPriceQuote
type CurrencyPriceQuote struct {

	// end-time for this quote to be valid
	// Required: true
	ExpirationTime *strfmt.DateTime `json:"expiration_time"`

	// maximum units for which this quote is valid
	Limit int64 `json:"limit,omitempty"`

	// The source-currency price of the target currency
	// Required: true
	Price *float32 `json:"price"`

	// globally unique id for this quote
	// Required: true
	QuoteID *string `json:"quote_id"`

	// The source currency used for pricing this quote
	// Required: true
	SourceCurrency *string `json:"source_currency"`

	// start time for this quote to be valid
	// Required: true
	StartTime *strfmt.DateTime `json:"start_time"`

	// stellar address for this quote provider
	StellarAddress string `json:"stellar_address,omitempty"`

	// The currency being purchased or exchanged using the source_currency
	// Required: true
	TargetCurrency *string `json:"target_currency"`
}

// Validate validates this currency price quote
func (m *CurrencyPriceQuote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuoteID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSourceCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTargetCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrencyPriceQuote) validateExpirationTime(formats strfmt.Registry) error {

	if err := validate.Required("expiration_time", "body", m.ExpirationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPriceQuote) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPriceQuote) validateQuoteID(formats strfmt.Registry) error {

	if err := validate.Required("quote_id", "body", m.QuoteID); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPriceQuote) validateSourceCurrency(formats strfmt.Registry) error {

	if err := validate.Required("source_currency", "body", m.SourceCurrency); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPriceQuote) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CurrencyPriceQuote) validateTargetCurrency(formats strfmt.Registry) error {

	if err := validate.Required("target_currency", "body", m.TargetCurrency); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrencyPriceQuote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrencyPriceQuote) UnmarshalBinary(b []byte) error {
	var res CurrencyPriceQuote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
